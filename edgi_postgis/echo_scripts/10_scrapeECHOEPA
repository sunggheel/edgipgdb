#!/usr/bin/env python3 
#Imports
import csv
#import csvkit
import os
import signal
import sys
import subprocess
from datetime import datetime
import glob
import re
from sqlalchemy import create_engine

#Set paths
os.chdir(os.path.dirname(sys.argv[0]))

#Connect to DB
engine = create_engine("postgresql://postgres@localhost:5432/slim_echoepa", echo=False)

# Truncate
def truncate(table):
        print ("truncating %s"%(table))
        try:
            with engine.connect() as connection:
                connection.execute('truncate "%s"' %(table))
        except Exception as e:
                print (sys.exc_info()[0])
                print (e.__class__.__name__)
                sys.exit("Exit")

# Convert the ECHO_EXPORTER table into a non-spatial table
print("Dropping the geometry index from the ECHO_EXPORTER table...")
engine.execute("DROP INDEX echo_exporter_geom_idx;")

print("Dropping the geometry column from the ECHO_EXPORTER table...")
sql1="""
ALTER TABLE "ECHO_EXPORTER" DROP COLUMN "wkb_geometry";
"""
engine.execute(sql1)

#Open list of files to scrape and add
with open('files.csv', newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        uniqueZips={}
        for row in reader:
                        table=row['CSV FILE']
                        location=row['Location']
                        url=row['URL']
                        if location not in uniqueZips.keys():
                                uniqueZips[location] = row
                                if not os.path.isfile('zips/%s' %(location)):
                                        modified=""
                                        while(modified==""):
                                                print("Getting %s" %(url))
                                                modified = subprocess.check_output("./wgetEPA %s" %(url), shell=True).decode("utf-8").strip().splitlines()[0]
                                        with engine.connect() as connection:
                                            results = connection.execute("UPDATE \"Last-Modified\" SET modified='%s' WHERE zip = '%s' AND name= '%s'" %(modified,location,table))
                                        if results.rowcount == 0:
                                            with engine.connect() as connection:
                                                results = connection.execute("INSERT INTO \"Last-Modified\" (name,modified,zip) VALUES ('%s','%s','%s')" %(table,modified,location))
                        if re.match("csv$",url.lower()):
                                os.rename("zips/"+location, "CSV/"+location) #move file
                        elif ".zip" in url.lower():
                                os.system("./unzipEPA %s %s.csv" %(location,table)) #Unzip
                        try:
                            with engine.connect() as connection:
                                test = connection.execute("select 'public.\"%s\"'::regclass" %(table))
                        except:
                            print("no schema yet exists")
                            t = subprocess.check_output("./createTable %s" %(table), shell=True).decode("utf-8").strip()
                                #create the table
                            with engine.connect() as connection:
                                connection.execute(t)
                        #print("strip nulls")
                        os.system("./stripNulls %s" %(table)) #some csvs failed to import with nulls. this also cuts the CSV (head command)
                        truncate(table) # truncate deletes existing rows in a table
                        print ("truncated %s"%(table))
                        #process = subprocess.Popen(["./csvImport",table,whichDb], stdout=subprocess.PIPE, preexec_fn=os.setsid, stderr=subprocess.PIPE)
                        #out, err = process.communicate()
                        #os.killpg(os.getpgid(process.pid), signal.SIGTERM) 
                        os.system("./csvImport %s" %(table))
                        '''
                        if err:
                                os.system("./tools/csvsqlEPACreate_pg %s %s" %(table,whichDb))
                        '''

print("running sql analyze...")
engine.execute("analyze")

# Convert the ECHO_EXPORTER table into a spatial table
print("Adding the geometry column from the ECHO_EXPORTER table...")
sql2="""
ALTER TABLE "ECHO_EXPORTER" ADD COLUMN "wkb_geometry" geometry(Point, 4269);
"""
engine.execute(sql2)

print("Populating the geometry column in the ECHO_EXPORTER table...")
sql3="""
UPDATE "ECHO_EXPORTER"                                              
  SET wkb_geometry = ST_SetSRID(ST_MakePoint("FAC_LONG", "FAC_LAT"), 4269);
"""
engine.execute(sql3)

print("Creating a spatial index for the ECHO_EXPORTER table...")
sql4="""
CREATE INDEX echo_exporter_geom_idx
  ON "ECHO_EXPORTER"
    USING GIST (wkb_geometry);
"""
engine.execute(sql4)

print("Analyzing the ECHO_EXPORTER table...")
sql5="""
ANALYZE "ECHO_EXPORTER";
"""
engine.execute(sql5)